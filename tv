-- Webhook Configuration
getgenv().whscript = "Lyez Script" -- Customize this as needed
getgenv().webhookexecUrl = "https://discord.com/api/webhooks/1387988473620992133/2a_oukQ3UE4aMW268LcskZxkBtKlY6AFu1FtRK_voGUoUJ9jzr5S7iV4Lj7EHxLXf85U" -- Your working URL
getgenv().ExecLogSecret = false -- Set to true to ping a role
getgenv().webhookEnabled = true -- Set to false to disable webhook if needed

-- Webhook Function
local function sendWebhook()
    if not getgenv().webhookEnabled then
        print("WEBHOOK: Disabled by user")
        return
    end

    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local MarketplaceService = game:GetService("MarketplaceService")
    local player = Players.LocalPlayer or {Name = "Unknown"}

    -- Wait for basic data to be ready
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait()
    end
    wait(1) -- Brief delay to ensure services are loaded

    print("SCRIPT EXECUTED - Starting webhook at " .. os.date("%H:%M:%S"))
    local username = player.Name or "Unknown"
    local gameName = (pcall(function() return MarketplaceService:GetProductInfo(game.PlaceId).Name end) and MarketplaceService:GetProductInfo(game.PlaceId).Name) or "Unknown Game"
    local executor = (identifyexecutor and identifyexecutor() or "Unknown")
    local hwid = (gethwid and gethwid() or "N/A") -- HWID, falls back to N/A if not available

    local data = {
        ["content"] = "",
        ["embeds"] = {{
            ["title"] = "üöÄ **Lyez Script Execution Log**",
            ["description"] = "*Script loaded with the following details:*",
            ["type"] = "rich",
            ["color"] = tonumber(0x3498db),
            ["fields"] = {
                {["name"] = "üë§ Username", ["value"] = "```" .. username .. "```", ["inline"] = true},
                {["name"] = "üéÆ Game Name", ["value"] = "```" .. gameName .. "```", ["inline"] = true},
                {["name"] = "‚öôÔ∏è Executor", ["value"] = "```" .. executor .. "```", ["inline"] = true},
                {["name"] = "üîí HWID", ["value"] = "```" .. hwid .. "```", ["inline"] = true}
            },
            ["footer"] = {["text"] = "Lyez Log | " .. os.date("%Y-%m-%d %H:%M:%S")}
        }}
    }

    local newdata = HttpService:JSONEncode(data)
    print("WEBHOOK PAYLOAD: " .. string.sub(newdata, 1, 100) .. "...")

    local headers = {["content-type"] = "application/json"}
    local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)
    if request then
        print("HTTP FUNCTION FOUND: " .. tostring(request))
        local success, err = pcall(function()
            local response = request({Url = getgenv().webhookexecUrl, Body = newdata, Method = "POST", Headers = headers})
            print("HTTP RESPONSE: " .. tostring(response and response.StatusCode or "No response"))
            return response
        end)
        if success then
            print("WEBHOOK SENT SUCCESSFULLY at " .. os.date("%H:%M:%S"))
        else
            warn("WEBHOOK FAILED: " .. tostring(err))
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Webhook Error",
                Text = "Failed: " .. tostring(err) .. ". Webhook disabled.",
                Duration = 5
            })
            getgenv().webhookEnabled = false
        end
    else
        warn("NO HTTP FUNCTION AVAILABLE at " .. os.date("%H:%M:%S"))
        local httpTest = pcall(game.HttpGet, game, "https://httpbin.org/get")
        if not httpTest then
            warn("BASIC HTTP TEST FAILED: Executor likely blocks HTTP requests")
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Webhook Error",
                Text = "Executor blocks HTTP. Webhook disabled.",
                Duration = 5
            })
            getgenv().webhookEnabled = false
        end
    end
end

-- Trigger Webhook on Script Load
if getgenv().webhookEnabled then
    spawn(function()
        local success, err = pcall(sendWebhook)
        if not success then
            print("WEBHOOK: Load failed - Error: " .. tostring(err))
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Webhook Error",
                Text = "Load failed: " .. tostring(err) .. ". Webhook disabled.",
                Duration = 5
            })
            getgenv().webhookEnabled = false
        end
    end)
end

-- Original Script Starts Here
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

-- Remote Events
local SetRuntimeData = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("GameLoop"):WaitForChild("SetRuntimeData")
local ShopFolder = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("Shop")
local EquipRemote = ShopFolder:WaitForChild("Equip")

-- Script state variables
local Speed = 20
local Enabled = false
local CurrentPreset = "Custom"
local debounce = false
local hurdleScriptEnabled = false

-- Preset table
local presets = {
    ["60m"] = 1.1,
    ["200m"] = 0.5,
    ["300mh"] = 1.5,
    ["110mh"] = 1.04,
    ["300m"] = 1.67,
    ["400mh"] = 2.2,
    ["400m"] = 2,
    ["100m"] = 0.8,
    ["Custom"] = 20
}

-- Device list
local devices = {
    "PC",
    "Mobile",
    "Controller on Mobile",
    "Controller on PC",
    "Controller on Xbox",
    "Controller on Playstation"
}

-- Animation packs, trail data, block data
local animationPacks = {
    {name = "Tryhard", id = "Tryhard"},
    {name = "Wizard", id = "Wizard"},
    {name = "Flip Master", id = "Flip Master"}
}

local trailData = {
    {title = "Water", description = "Ok you gotta admit these bubbles are cool.", trailName = "Water", price = 0, rarity = "Elite"},
    {title = "O-Type", description = "A name for a blue supernova star.", trailName = "O-Type", price = 0, rarity = "Infinite"},
    {title = "Love", description = "Sorry, my friend here Justin is already taken.", trailName = "Love", price = 0, rarity = "Rare"},
    {title = "Error", description = "A ghost in the machine.", trailName = "Error", price = 0, rarity = "Infinite"},
    {title = "Midnight Star", description = "Shine bright like a solid form of the element carbon.", trailName = "Midnight Star", price = 0, rarity = "Elite"},
    {title = "Twins", description = "One of cunning, one of heart.", trailName = "Twins", price = 0, rarity = "Infinite"},
    {title = "Half Angel - Half Devil", description = "Paradoxical soul.", trailName = "Half Angel Half Devil", price = 0, rarity = "Elite"},
    {title = "Pure Angel", description = "Absolutely perfect.", trailName = "Pure Angel", price = 0, rarity = "Infinite"},
    {title = "Flaming Horizon", description = "Silhouetted in fire.", trailName = "Flaming Horizon", price = 1000, rarity = "Elite"},
    {title = "Iced", description = "For when you prefer to do it to 'em cold.", trailName = "Iced", price = 0, rarity = "Elite"},
    {title = "Shooting Star", description = "Cuz you're a skyyyyy, you're a skyyyyy full of stars... stars...", trailName = "Shooting Star", price = 0, rarity = "Infinite"},
    {title = "Cursed Soul", description = "Visited from other realms.", trailName = "Cursed Soul", price = 0, rarity = "Elite"},
    {title = "Petal Breeze", description = "It has a particular aesthetic.", trailName = "Petal Breeze", price = 0, rarity = "Elite"},
    {title = "Peppermint", description = "A scent that will burn off your nose hairs.", trailName = "Peppermint", price = 0, rarity = "Elite"},
    {title = "Snow Time", description = "Bring the blizzard!", trailName = "Snow Time", price = 0, rarity = "Infinite"},
    {title = "May The 4th", description = "Do. Or do not. There is no try...", trailName = "May The 4th", price = 0, rarity = "Infinite"},
    {title = "Isonic Green", description = "Constructs of another realm.", trailName = "Isonic Green", price = 0, rarity = "Infinite"},
    {title = "Infernal", description = "Rise my great pumpkin, RISE.", trailName = "Infernal", price = 0, rarity = "Rare"},
    {title = "Blue Revolution", description = "I got four big blocks, how many blocks do you have? I bet you don't have four.", trailName = "Blue Revolution", price = 0, rarity = "Infinite"},
    {title = "Glory", description = "Peak elegance, peak technique, peak physique.", trailName = "Glory", price = 0, rarity = "Infinite"},
    {title = "Lightning", description = "Zip Zap Bloop, Ice Cream Scoop!", trailName = "Lightning", price = 0, rarity = "Elite"},
    {title = "Electro", description = "Captain, we are approaching lightspeed.", trailName = "Electro", price = 0, rarity = "Infinite"},
    {title = "Aimbot", description = "oh, WHAT?! CONTROLLA PLAYA!!! THAT IS A CONTROLLA PLAYA!", trailName = "Aimbot", price = 0, rarity = "Rare"},
    {title = "Demon", description = "Don't deal with the devil.", trailName = "Demon", price = 0, rarity = "Elite"},
    {title = "Dark Magic", description = "Trained in ways they can't understand.", trailName = "Dark Magic", price = 0, rarity = "Infinite"}
}

local blockData = {
    {name = "Spooky Blocks", id = "Spooky Blocks"}
}

-- Load Obsidian UI Library with error handling
local Library
local success, err = pcall(function()
    Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/refs/heads/main/Library.lua"))()
end)
if not success then
    warn("Failed to load Obsidian UI Library: " .. tostring(err))
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Error",
        Text = "UI failed to load: Library error. Check console.",
        Duration = 5
    })
    return
end

-- Create the main window
local Window = Library:CreateWindow({
    Title = "<b>Lyez</b>",
    Icon = "monitor",
    Footer = "v1.0.0 | @elitelyez on discord",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center = true,
    AutoShow = true,
    MobileButtonsSide = "Left",
    Size = UDim2.fromOffset(600, 500),
    ShowCustomCursor = true
})

-- Main tab
local MainTab = Window:AddTab("Main", "home")

-- Stamina Controls groupbox
local ControlsGroupbox = MainTab:AddLeftGroupbox("Stamina Controls", "bolt")

-- Stamina toggle
local StaminaToggle = ControlsGroupbox:AddToggle("StaminaToggle", {
    Text = "Enable Speed",
    Default = false,
    Tooltip = "Toggles the speed script",
    Callback = function(Value)
        Enabled = Value
        Library:Notify({
            Title = "Speed Script",
            Description = "Speed " .. (Value and "enabled" or "disabled"),
            Time = 3
        })
        print("Stamina enabled:", Value)
    end
})

StaminaToggle:AddKeyPicker("StaminaKeybind", {
    Default = "F",
    Mode = "Toggle",
    Text = "Toggle Speed",
    SyncToggleState = true,
    Callback = function(Value)
        print("Keybind toggled stamina:", Value)
    end
})

-- Preset section
ControlsGroupbox:AddDivider()
ControlsGroupbox:AddLabel({
    Text = "Preset Settings",
    DoesWrap = true
})

-- Function to update dropdown values with speeds
local function updateDropdownValues()
    local values = {"Custom (" .. presets["Custom"] .. ")"}
    for preset, speed in pairs(presets) do
        if preset ~= "Custom" then
            table.insert(values, preset .. " (" .. speed .. ")")
        end
    end
    local success, err = pcall(function()
        PresetDropdown.Values = values
        PresetDropdown:Display()
        -- Force re-selection of current preset
        local currentValue = CurrentPreset == "Custom" and ("Custom (" .. presets["Custom"] .. ")") or (CurrentPreset .. " (" .. presets[CurrentPreset] .. ")")
        PresetDropdown:Refresh(currentValue)
    end)
    if not success then
        warn("Failed to update dropdown: " .. tostring(err))
        Library:Notify({
            Title = "Error",
            Text = "Dropdown update failed. Speeds shown in notifications.",
            Time = 3
        })
        -- Fallback: recreate dropdown
        ControlsGroupbox:Remove(PresetDropdown)
        PresetDropdown = ControlsGroupbox:AddDropdown("PresetDropdown", {
            Text = "Select Race Preset",
            Values = values,
            Default = CurrentPreset == "Custom" and "Custom (" .. presets["Custom"] .. ")" or CurrentPreset .. " (" .. presets[CurrentPreset] .. ")",
            Tooltip = "Choose a race preset or custom speed",
            Callback = function(Value)
                local presetName = Value:match("^[^%s%(]+")
                CurrentPreset = presetName
                if presetName ~= "Custom" then
                    Speed = presets[presetName]
                    Library:Notify({
                        Title = "Preset Selected",
                        Description = "Preset " .. presetName .. " set with speed: " .. Speed,
                        Time = 3
                    })
                    print("Preset selected:", presetName, "Speed:", Speed)
                else
                    Speed = presets["Custom"]
                    Library:Notify({
                        Title = "Custom Preset",
                        Description = "Custom speed set to: " .. Speed .. ". Adjust below.",
                        Time = 3
                    })
                end
                updateDropdownValues()
            end
        })
    end
end

-- Preset dropdown
local PresetDropdown = ControlsGroupbox:AddDropdown("PresetDropdown", {
    Text = "Select Race Preset",
    Values = {"Custom (" .. presets["Custom"] .. ")", "60m (" .. presets["60m"] .. ")", "200m (" .. presets["200m"] .. ")", "100m (" .. presets["100m"] .. ")", "300mh (" .. presets["300mh"] .. ")", "110mh (" .. presets["110mh"] .. ")", "300m (" .. presets["300m"] .. ")", "400mh (" .. presets["400mh"] .. ")", "400m (" .. presets["400m"] .. ")"},
    Default = 1, -- Default to "Custom"
    Tooltip = "Choose a race preset or custom speed",
    Callback = function(Value)
        local presetName = Value:match("^[^%s%(]+")
        CurrentPreset = presetName
        if presetName ~= "Custom" then
            Speed = presets[presetName]
            Library:Notify({
                Title = "Preset Selected",
                Description = "Preset " .. presetName .. " set with speed: " .. Speed,
                Time = 3
            })
            print("Preset selected:", presetName, "Speed:", Speed)
        else
            Speed = presets["Custom"]
            Library:Notify({
                Title = "Custom Preset",
                Description = "Custom speed set to: " .. Speed .. ". Adjust below.",
                Time = 3
            })
        end
        updateDropdownValues()
    end
})

-- Input for editing preset speed
local PresetSpeedInput = ControlsGroupbox:AddInput("PresetSpeedInput", {
    Text = "Edit Preset Speed",
    Default = "",
    Numeric = true,
    Finished = true,
    Placeholder = "Enter speed for selected preset",
    Tooltip = "Edit the speed for the selected preset",
    Callback = function(Value)
        local val = tonumber(Value)
        if val and val > 0 and CurrentPreset ~= "Custom" then
            presets[CurrentPreset] = val
            Speed = val
            updateDropdownValues()
            Library:Notify({
                Title = "Preset Updated",
                Description = "Preset " .. CurrentPreset .. " speed set to: " .. val,
                Time = 3
            })
            print("Preset", CurrentPreset, "updated to speed:", val)
        else
            Library:Notify({
                Title = "Invalid Input",
                Description = "Select a valid preset (not Custom) and enter a number > 0",
                Time = 3
            })
        end
    end
})

-- Input for custom speed
local CustomSpeedInput = ControlsGroupbox:AddInput("CustomSpeedInput", {
    Text = "Custom Speed",
    Default = tostring(presets["Custom"]),
    Numeric = true,
    Finished = true,
    Placeholder = "Enter custom speed",
    Tooltip = "Set a custom speed value for the Custom preset",
    Callback = function(Value)
        local val = tonumber(Value)
        if val and val > 0 then
            presets["Custom"] = val
            if CurrentPreset == "Custom" then
                Speed = val
            end
            updateDropdownValues()
            Library:Notify({
                Title = "Custom Speed Updated",
                Description = "Custom speed set to: " .. val,
                Time = 3
            })
            print("Custom speed updated:", val)
        else
            Library:Notify({
                Title = "Invalid Input",
                Description = "Please enter a number greater than 0",
                Time = 3
            })
        end
    end
})

-- Apply button
local ApplyButton = ControlsGroupbox:AddButton({
    Text = "Apply Settings",
    Func = function()
        if CurrentPreset == "" then
            Library:Notify({
                Title = "Error",
                Description = "Please select a preset or set a custom speed",
                Time = 3
            })
            return
        end
        updateDropdownValues()
        Library:Notify({
            Title = "Settings Applied",
            Description = "Speed set to: " .. Speed .. " (" .. CurrentPreset .. ")",
            Time = 3
        })
        print("Settings applied - Speed:", Speed, "Preset:", CurrentPreset)
    end,
    Tooltip = "Apply the selected preset or custom speed"
})

-- Hurdles groupbox
local HurdlesGroupbox = MainTab:AddLeftGroupbox("Hurdles", "fence")
HurdlesGroupbox:AddLabel({
    Text = "Toggle to remove hurdle hitboxes.",
    DoesWrap = true
})
HurdlesGroupbox:AddDivider()

local HurdleButton = HurdlesGroupbox:AddButton({
    Text = hurdleScriptEnabled and "Disable Hurdle Removal" or "Enable Hurdle Removal",
    Func = function()
        hurdleScriptEnabled = not hurdleScriptEnabled
        HurdleButton:SetText(hurdleScriptEnabled and "Disable Hurdle Removal" or "Enable Hurdle Removal")
        Library:Notify({
            Title = "Hurdle Removal",
            Description = "Hurdle hitbox removal " .. (hurdleScriptEnabled and "enabled" or "disabled"),
            Time = 3
        })
        print("Hurdle removal enabled:", hurdleScriptEnabled)
    end,
    Tooltip = "Toggles removal of hurdle hitboxes"
})

-- Device Spoofing groupbox (adapted from reference script)
local DeviceGroupbox = MainTab:AddRightGroupbox("Device Spoofing", "monitor")
DeviceGroupbox:AddLabel({
    Text = "Select a device to spoof.",
    DoesWrap = true
})
DeviceGroupbox:AddDivider()

for _, device in ipairs(devices) do
    local button = DeviceGroupbox:AddButton({
        Text = device,
        Func = function()
            if debounce then
                print("Debounce active, skipping device spoof")
                return
            end
            debounce = false
            print("Attempting to spoof device to:", device)
            local success, err = pcall(function()
                SetRuntimeData:FireServer({
                    deviceType = device
                }, tonumber(os.date("%y")) * os.date("%y"))
            end)
            if success then
                Library:Notify({
                    Title = "Device Spoofed",
                    Description = "Device set to: " .. device,
                    Time = 3
                })
                print("Device spoofed successfully to:", device)
            else
                Library:Notify({
                    Title = "Error",
                    Description = "Failed to spoof device: " .. tostring(err),
                    Time = 3
                })
                warn("Device spoof failed:", tostring(err))
            end
            task.wait(0.1) -- Short debounce
            debounce = false
            print("Debounce reset, ready for next spoof")
        end,
        Tooltip = "Spoof device as " .. device
    })
    -- Add hover and click effects (simulating reference script)
    button.MouseEnter = function()
        button:SetBackgroundColor(Color3.fromRGB(70, 70, 70))
        print("Mouse entered button:", device)
    end
    button.MouseLeave = function()
        button:SetBackgroundColor(Color3.fromRGB(50, 50, 50))
        print("Mouse left button:", device)
    end
    button.MouseButton1Click = function()
        if debounce then return end
        print("Button clicked for device:", device)
        button:SetBackgroundColor(Color3.fromRGB(0, 120, 255))
        task.wait(0.5)
        button:SetBackgroundColor(Color3.fromRGB(50, 50, 50))
    end
end

DeviceGroupbox:AddDivider()
if Library.IsMobile then
    DeviceGroupbox:AddLabel({
        Text = "Mobile: Tap buttons on the right to toggle UI. Drag the window to reposition.",
        DoesWrap = true
    })
else
    DeviceGroupbox:AddLabel("Desktop: Press RightCtrl to toggle UI. Use F to toggle stamina.")
end

-- Animation Pack tab
local AnimationTab = Window:AddTab("Animation Pack", "play")
local AnimationsGroupbox = AnimationTab:AddLeftGroupbox("Animations", "play")
AnimationsGroupbox:AddLabel({
    Text = "Select an animation pack to equip.",
    DoesWrap = true
})
AnimationsGroupbox:AddDivider()
for _, pack in ipairs(animationPacks) do
    AnimationsGroupbox:AddButton({
        Text = pack.name,
        Func = function()
            local success, err = pcall(function()
                EquipRemote:FireServer("AnimationPacks", pack.id, player)
            end)
            if success then
                Library:Notify({
                    Title = "Animation Equipped",
                    Description = "Equipped animation pack: " .. pack.name,
                    Time = 3
                })
                print(player.Name .. " requested equip for " .. pack.id)
            else
                Library:Notify({
                    Title = "Error",
                    Description = "Failed to equip " .. pack.name .. ": " .. tostring(err),
                    Time = 3
                })
                warn(player.Name .. " failed to request equip for " .. pack.id .. ": " .. tostring(err))
            end
        end,
        Tooltip = "Equip the " .. pack.name .. " animation pack"
    })
end

local AnimationInfoGroupbox = AnimationTab:AddRightGroupbox("Information", "info")
AnimationInfoGroupbox:AddLabel({
    Text = "Click a button to equip an animation pack. Ensure you own the pack!",
    DoesWrap = true
})
AnimationInfoGroupbox:AddDivider()
if Library.IsMobile then
    AnimationInfoGroupbox:AddLabel({
        Text = "Mobile: Tap buttons on the right to toggle UI. Drag the window to reposition.",
        DoesWrap = true
    })
else
    AnimationInfoGroupbox:AddLabel("Desktop: Press RightCtrl to toggle UI.")
end

-- Trails tab
local TrailsTab = Window:AddTab("Trails", "sparkle")
local TrailsGroupbox = TrailsTab:AddLeftGroupbox("Trails", "sparkle")
TrailsGroupbox:AddLabel({
    Text = "Select a trail to equip.",
    DoesWrap = true
})
TrailsGroupbox:AddDivider()
for _, trail in ipairs(trailData) do
    TrailsGroupbox:AddButton({
        Text = trail.title .. " (" .. trail.rarity .. ")",
        Func = function()
            local success, err = pcall(function()
                EquipRemote:FireServer("Trails", trail.trailName)
            end)
            if success then
                Library:Notify({
                    Title = "Trail Equipped",
                    Description = "Equipped trail: " .. trail.title .. " (" .. trail.rarity .. ")",
                    Time = 3
                })
                print(player.Name .. " fired EquipRemote for: " .. trail.trailName)
            else
                Library:Notify({
                    Title = "Error",
                    Description = "Failed to equip " .. trail.title .. ": " .. tostring(err),
                    Time = 3
                })
                warn(player.Name .. " EquipTrail: Failed to fire EquipRemote: " .. tostring(err))
            end
        end,
        Tooltip = trail.description .. " (" .. trail.rarity .. ")"
    })
end

local TrailsInfoGroupbox = TrailsTab:AddRightGroupbox("Information", "info")
TrailsInfoGroupbox:AddLabel({
    Text = "Click a button to equip a trail. Ensure you own the trail!",
    DoesWrap = true
})
TrailsInfoGroupbox:AddDivider()
if Library.IsMobile then
    TrailsInfoGroupbox:AddLabel({
        Text = "Mobile: Tap buttons on the right to toggle UI. Drag the window to reposition.",
        DoesWrap = true
    })
else
    TrailsInfoGroupbox:AddLabel("Desktop: Press RightCtrl to toggle UI.")
end

-- Blocks tab
local BlocksTab = Window:AddTab("Blocks", "cube")
local BlocksGroupbox = BlocksTab:AddLeftGroupbox("Blocks", "cube")
BlocksGroupbox:AddLabel({
    Text = "Select a block to equip.",
    DoesWrap = true
})
BlocksGroupbox:AddDivider()
for _, block in ipairs(blockData) do
    BlocksGroupbox:AddButton({
        Text = block.name,
        Func = function()
            local success, err = pcall(function()
                EquipRemote:FireServer("Blocks", block.id)
            end)
            if success then
                Library:Notify({
                    Title = "Block Equipped",
                    Description = "Equipped block: " .. block.name,
                    Time = 3
                })
                print("Equipped block:", block.name)
            else
                Library:Notify({
                    Title = "Error",
                    Description = "Failed to equip " .. block.name .. ": " .. tostring(err),
                    Time = 3
                })
                warn("Failed to equip " .. block.name .. ": " .. tostring(err))
            end
        end,
        Tooltip = "Equip the " .. block.name .. " block"
    })
end

local BlocksInfoGroupbox = BlocksTab:AddRightGroupbox("Information", "info")
BlocksInfoGroupbox:AddLabel({
    Text = "Click a button to equip a block. Ensure you own the block!",
    DoesWrap = true
})
BlocksInfoGroupbox:AddDivider()
if Library.IsMobile then
    BlocksInfoGroupbox:AddLabel({
        Text = "Mobile: Tap buttons on the right to toggle UI. Drag the window to reposition.",
        DoesWrap = true
    })
else
    BlocksInfoGroupbox:AddLabel("Desktop: Press RightCtrl to toggle UI.")
end

-- Theming
Library.Scheme = {
    BackgroundColor = Color3.fromRGB(20, 20, 30),
    MainColor = Color3.fromRGB(30, 30, 40),
    AccentColor = Color3.fromRGB(100, 200, 255),
    OutlineColor = Color3.fromRGB(50, 50, 80),
    FontColor = Color3.new(1, 1, 1),
    Font = Font.fromEnum(Enum.Font.SourceSans)
}

if Library.IsMobile then
    Library:SetDPIScale(125)
end

-- Stamina movement logic
RunService.Heartbeat:Connect(function()
    if not Enabled then return end
    local character = player.Character
    local humanoid = character and character:FindFirstChild("Humanoid")
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not hrp then return end
    local isCrouching = humanoid.WalkSpeed < 10 or humanoid.Sit or humanoid:GetState() == Enum.HumanoidStateType.Seated
    if not isCrouching and humanoid.MoveDirection.Magnitude > 0 then
        local moveStep = Speed / 60
        hrp.CFrame = hrp.CFrame * CFrame.new(0, 0, -moveStep)
    end
end)

-- Hurdle hitbox removal logic
RunService.Heartbeat:Connect(function()
    if not hurdleScriptEnabled then return end
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local hurdleHitbox = humanoidRootPart:FindFirstChild("HurdleHitbox")
            if hurdleHitbox then
                hurdleHitbox:Destroy()
                print("HurdleHitbox destroyed")
            end
        end
    end
end)

-- Notify UI loaded
Library:Notify({
    Title = "Lyez Loaded",
    Description = "Stamina, Device Spoofer, Hurdles, Animations, Trails, and Blocks loaded.",
    Time = 5
})

Library:Toggle(true)